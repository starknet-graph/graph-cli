on:
  schedule:
    # 1:05 past midnight UTC
    - cron: '5 1 * * *'

env:
  DEFAULT_BRANCH: 'main'

name: 'Sync with upstream'
jobs:
  sync-check:
    name: 'Sync Necessity Check'
    runs-on: 'ubuntu-latest'
    outputs:
      should_sync: ${{ steps.out.outputs.should_sync }}

    steps:
      - name: 'Checkout source code'
        uses: 'actions/checkout@v3'
        with:
          fetch-depth: 0
          submodules: true

      - id: 'out'
        name: 'Check if sync is needed'
        run: |
          git fetch origin
          git remote add upstream https://github.com/graphprotocol/graph-cli
          git fetch upstream --no-tags

          MERGE_BASE=$(git merge-base origin/$DEFAULT_BRANCH upstream/$DEFAULT_BRANCH)

          # Don't force push unnecessarily unless changes are detected
          if [[ $(git rev-list $MERGE_BASE..upstream/$DEFAULT_BRANCH | wc -l) -ne 0 ]]; then 
            echo "should_sync=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected on upstream $DEFAULT_BRANCH"
            echo "should_sync=false" >> $GITHUB_OUTPUT
          fi

  sync:
    name: 'Sync'
    runs-on: 'ubuntu-latest'
    needs: 'sync-check'
    if: "needs.sync-check.outputs.should_sync == 'true'"

    steps:
      - name: 'Checkout source code'
        uses: 'actions/checkout@v3'
        with:
          # Subsequent actions are not triggered unless using PAT
          token: '${{ secrets.GH_PAT }}'
          fetch-depth: 0
          submodules: true

      - name: 'Install pnpm'
        run: |
          curl -fsSL https://get.pnpm.io/install.sh | bash -
          echo "$HOME/.local/share/pnpm/" >> $GITHUB_PATH

      - name: 'Config Git'
        run: |
          git config --global user.name "Jonathan LEI"
          git config --global user.email "me@xjonathan.dev"

      - name: 'Update branch (home branch)'
        run: |
          git fetch origin
          git remote add upstream https://github.com/graphprotocol/graph-cli
          git fetch upstream --no-tags

          echo "MERGE_BASE=$(git merge-base origin/$DEFAULT_BRANCH upstream/$DEFAULT_BRANCH)" >> $GITHUB_ENV

          # Brings files from `home` to default branch
          git checkout $DEFAULT_BRANCH
          git reset --hard upstream/$DEFAULT_BRANCH
          git checkout origin/home .

          # We don't want the upstream release workflows
          rm .github/workflows/release.yml
          rm .github/workflows/pr.yml

          git add .
          git commit -m "chore: README and CI changes"

      - name: 'Update branch (rename package)'
        run: |
          # We need to do this because the project enforces dependency sorting
          pnpm i
          git reset --hard

          find . -type f ! -name "*.md" ! -path "./.git/*" ! -path "./.github/*" ! -path "./node_modules/*" -exec sed -i "s/@graphprotocol/@starknet-graph/g" {} \;
          find . -type f ! -name "*.md" ! -path "./.git/*" ! -path "./.github/*" ! -path "./node_modules/*" -exec sed -i "s/github.com\/graphprotocol/github.com\/starknet-graph/g" {} \;
          find . -type f ! -name "*.md" ! -path "./.git/*" ! -path "./.github/*" ! -path "./node_modules/*" -exec sed -i "s/github\\\\.com\\\\\/graphprotocol/github\\\\\\.com\\\\\/starknet-graph/g" {} \;

          yarn prettier --write .
          git clean -dfx

          git add .
          git commit -m "chore: rename packages"

      - name: 'Update branch (rebase)'
        run: |
          # Here, we pick commits on the default branch except the first two. We do this instead
          # of a naive rebase to avoid conflicts.
          COMMIT_COUNT=$(git rev-list $MERGE_BASE..origin/$DEFAULT_BRANCH | wc -l)
          git cherry-pick origin/$DEFAULT_BRANCH~$(($COMMIT_COUNT-2))..origin/$DEFAULT_BRANCH

      - name: 'Install dependencies'
        run: |
          pnpm install

      - name: 'Build packages'
        run: |
          pnpm build

      # Step taken from `ci.yml` on `main`
      - name: 'Run cli tests'
        uses: 'nick-fields/retry@v2'
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: 'pnpm run test:cli -- --forceExit'

      # Step taken from `ci.yml` on `main`
      - name: 'Run event-handler tests'
        uses: 'nick-fields/retry@v2'
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: 'pnpm run --filter="basic-event-handlers" test'

      # Step taken from `ci.yml` on `main`
      - name: 'Run ts tests'
        uses: 'nick-fields/retry@v2'
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: 'pnpm run test:ts -- --forceExit'

      - name: 'Push updated branch'
        run: |
          git push --force-with-lease
